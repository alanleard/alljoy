typeof XML == "undefined" && (XML = function() {});

XML.ObjTree = function() {
    return this;
};

XML.ObjTree.VERSION = "0.23";

XML.ObjTree.prototype.xmlDecl = "<!-- xml generated by alljoy -->";

XML.ObjTree.prototype.attr_prefix = "-";

XML.ObjTree.prototype.parseXML = function(xml) {
    var root;
    if (window.DOMParser) {
        var xmldom = new DOMParser, dom = xmldom.parseFromString(xml, "application/xml");
        if (!dom) return;
        root = dom.documentElement;
    } else if (window.ActiveXObject) {
        xmldom = new ActiveXObject("Microsoft.XMLDOM");
        xmldom.async = !1;
        xmldom.loadXML(xml);
        root = xmldom.documentElement;
    }
    if (!root) return;
    return this.parseDOM(root);
};

XML.ObjTree.prototype.parseHTTP = function(url, options, callback) {
    var myopt = {};
    for (var key in options) myopt[key] = options[key];
    myopt.method || (typeof myopt.postBody == "undefined" && typeof myopt.postbody == "undefined" && typeof myopt.parameters == "undefined" ? myopt.method = "get" : myopt.method = "post");
    if (callback) {
        myopt.asynchronous = !0;
        var __this = this, __func = callback, __save = myopt.onComplete;
        myopt.onComplete = function(trans) {
            var tree;
            trans && trans.responseXML && trans.responseXML.documentElement && (tree = __this.parseDOM(trans.responseXML.documentElement));
            __func(tree, trans);
            __save && __save(trans);
        };
    } else myopt.asynchronous = !1;
    var trans;
    if (typeof HTTP != "undefined" && HTTP.Request) {
        myopt.uri = url;
        var req = new HTTP.Request(myopt);
        req && (trans = req.transport);
    } else if (typeof Ajax != "undefined" && Ajax.Request) {
        var req = new Ajax.Request(url, myopt);
        req && (trans = req.transport);
    }
    if (callback) return trans;
    if (trans && trans.responseXML && trans.responseXML.documentElement) return this.parseDOM(trans.responseXML.documentElement);
};

XML.ObjTree.prototype.parseDOM = function(root) {
    if (!root) return;
    this.__force_array = {};
    if (this.force_array) for (var i = 0; i < this.force_array.length; i++) this.__force_array[this.force_array[i]] = 1;
    var json = this.parseElement(root);
    this.__force_array[root.nodeName] && (json = [ json ]);
    if (root.nodeType != 11) {
        var tmp = {};
        tmp[root.nodeName] = json;
        json = tmp;
    }
    return json;
};

XML.ObjTree.prototype.parseElement = function(elem) {
    if (elem.nodeType == 7) return;
    if (elem.nodeType == 3 || elem.nodeType == 4) {
        var bool = elem.nodeValue.match(/[^\x00-\x20]/);
        if (bool == null) return;
        return elem.nodeValue;
    }
    var retval, cnt = {};
    if (elem.attributes && elem.attributes.length) {
        retval = {};
        for (var i = 0; i < elem.attributes.length; i++) {
            var key = elem.attributes[i].nodeName;
            if (typeof key != "string") continue;
            var val = elem.attributes[i].nodeValue;
            if (!val) continue;
            key = this.attr_prefix + key;
            typeof cnt[key] == "undefined" && (cnt[key] = 0);
            cnt[key]++;
            this.addNode(retval, key, cnt[key], val);
        }
    }
    if (elem.childNodes && elem.childNodes.length) {
        var textonly = !0;
        retval && (textonly = !1);
        for (var i = 0; i < elem.childNodes.length && textonly; i++) {
            var ntype = elem.childNodes[i].nodeType;
            if (ntype == 3 || ntype == 4) continue;
            textonly = !1;
        }
        if (textonly) {
            retval || (retval = "");
            for (var i = 0; i < elem.childNodes.length; i++) retval += elem.childNodes[i].nodeValue;
        } else {
            retval || (retval = {});
            for (var i = 0; i < elem.childNodes.length; i++) {
                var key = elem.childNodes[i].nodeName;
                if (typeof key != "string") continue;
                var val = this.parseElement(elem.childNodes[i]);
                if (!val) continue;
                typeof cnt[key] == "undefined" && (cnt[key] = 0);
                cnt[key]++;
                this.addNode(retval, key, cnt[key], val);
            }
        }
    }
    return retval;
};

XML.ObjTree.prototype.addNode = function(hash, key, cnts, val) {
    if (this.__force_array[key]) {
        cnts == 1 && (hash[key] = []);
        hash[key][hash[key].length] = val;
    } else cnts == 1 ? hash[key] = val : cnts == 2 ? hash[key] = [ hash[key], val ] : hash[key][hash[key].length] = val;
};

XML.ObjTree.prototype.writeXML = function(tree) {
    var xml = this.hash_to_xml(null, tree);
    return this.xmlDecl + xml;
};

XML.ObjTree.prototype.hash_to_xml = function(name, tree) {
    var elem = [], attr = [];
    for (var key in tree) {
        if (!tree.hasOwnProperty(key)) continue;
        var val = tree[key];
        key.charAt(0) != this.attr_prefix ? typeof val == "undefined" || val == null ? elem[elem.length] = "<" + key + " />" : typeof val == "object" && val.constructor == Array ? elem[elem.length] = this.array_to_xml(key, val) : typeof val == "object" ? elem[elem.length] = this.hash_to_xml(key, val) : elem[elem.length] = this.scalar_to_xml(key, val) : attr[attr.length] = " " + key.substring(1) + "=\"" + this.xml_escape(val) + "\"";
    }
    var jattr = attr.join(""), jelem = elem.join("");
    typeof name != "undefined" && name != null && (elem.length > 0 ? jelem.match(/\n/) ? jelem = "<" + name + jattr + ">\n" + jelem + "</" + name + ">\n" : jelem = "<" + name + jattr + ">" + jelem + "</" + name + ">\n" : jelem = "<" + name + jattr + " />\n");
    return jelem;
};

XML.ObjTree.prototype.array_to_xml = function(name, array) {
    var out = [];
    for (var i = 0; i < array.length; i++) {
        var val = array[i];
        typeof val == "undefined" || val == null ? out[out.length] = "<" + name + " />" : typeof val == "object" && val.constructor == Array ? out[out.length] = this.array_to_xml(name, val) : typeof val == "object" ? out[out.length] = this.hash_to_xml(name, val) : out[out.length] = this.scalar_to_xml(name, val);
    }
    return out.join("");
};

XML.ObjTree.prototype.scalar_to_xml = function(name, text) {
    return name == "#text" ? this.xml_escape(text) : "<" + name + ">" + this.xml_escape(text) + "</" + name + ">\n";
};

XML.ObjTree.prototype.xml_escape = function(text) {
    return (text + "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
};

module.exports = XML;